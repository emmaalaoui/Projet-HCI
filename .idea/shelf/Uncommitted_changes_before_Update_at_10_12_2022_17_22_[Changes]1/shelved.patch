Index: studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/board.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/board.py b/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/board.py
--- a/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/board.py	
+++ b/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/board.py	
@@ -1,6 +1,6 @@
 from PyQt6.QtWidgets import QProgressBar, QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
 from PyQt6.QtCore import Qt, QBasicTimer, pyqtSignal, QPointF, QPoint, QRect
-from PyQt6.QtGui import QPainter, QPixmap, QPen, QBrush, QCursor, QColor
+from PyQt6.QtGui import QPainter, QPixmap, QPen, QBrush, QColor
 from PyQt6.QtTest import QTest
 import time
 from piece import Piece
@@ -28,12 +28,6 @@
         self.setLayout(self.mainLayout)
         self.resize(800, 1000)
         self.draw = True
-        '''self.cursor = QCursor()
-        # self.image.setCursor(self.cursor)
-        #self.cursor.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
-        self.cursor.setShape(Qt.CursorShape.ArrowCursor)
-        QApplication.setOverrideCursor(self.cursor)
-        print(self.cursor.shape())'''
 
     def resizeEvent(self, event):
         '''if self.contentsRect().width() > self.contentsRect().height():
@@ -48,65 +42,9 @@
         self.timer = QBasicTimer()  # create a timer for the game
         self.isStarted = False  # game is not currently started
 
-        '''#self.start()                # start the game which will start the timer
-        #0 représente une case vide, 1 représente les noirs (ce joueur commence) et 2 représente les blancs
-        self.a = 0
-        self.b = 0
-        self.c = 0
-        self.d = 0
-        self.e = 0
-        self.f = 0
-        self.g = 0
-        self.h = 0
-        self.i = 0
-        self.j = 0
-        self.k = 0
-        self.l = 0
-        self.m = 0
-        self.n = 0
-        self.o = 0
-        self.p = 0
-        self.q = 0
-        self.r = 0
-        self.s = 0
-        self.t = 0
-        self.u = 0
-        self.v = 0
-        self.w = 0
-        self.x = 0
-        self.y = 0
-        self.z = 0
-        self.ab = 0
-        self.ac = 0
-        self.ad = 0
-        self.ae = 0
-        self.af = 0
-        self.ag = 0
-        self.ah = 0
-        self.ai = 0
-        self.aj = 0
-        self.ak = 0
-        self.al = 0
-        self.am = 0
-        self.an = 0
-        self.ao = 0
-        self.ap = 0
-        self.aq = 0
-        self.ar = 0
-        self.ay = 0
-        self.at = 0
-        self.au = 0
-        self.av = 0
-        self.aw = 0
-        self.ax = 0
-        #il y'a 49 intersections donc on doit créer un tableau avc 49 cases et le remplir de 0, 1 ou 2
-        [self.a, self.b, self.c, self.d, self.e, self.f, self.g],
-          [self.h, self.i, self.j, self.k, self.l, self.m, self.n],
-          [self.o, self.p, self.q, self.r, self.s, self.t, self.u],
-          [self.v, self.w, self.x, self.y, self.z, self.ab, self.ac],
-          [self.ad, self.ae, self.af, self.ag, self.ah, self.ai, self.aj],
-          [self.ak, self.al, self.am, self.an, self.ao, self.ap, self.aq],
-          [self.ar, self.ay, self.at, self.au, self.av, self.aw, self.ax],'''
+        # self.start()                # start the game which will start the timer
+        # 0 représente une case vide, 1 représente les noirs (ce joueur commence) et 2 représente les blancs
+
         self.boardArray = self.go.gameLogic.boardState  # TODO - create a 2d int/Piece array to store the state of the game
         self.printBoardArray()  # TODO - uncomment this method after creating the array above
 
Index: studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/score_board.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/score_board.py b/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/score_board.py
--- a/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/score_board.py	
+++ b/studentAnswerTemplate-20221122/HGP_GroupNumber_Project/code/score_board.py	
@@ -3,7 +3,7 @@
 from PyQt6.QtGui import QIcon, QAction, QPixmap, QCursor, QPen, QPainter, QFont
 from board import Board
 class ScoreBoard(QWidget):
-    '''# base the score_board on a QDockWidget'''
+    '''# base the score_board on a QWidget'''
 
     def __init__(self, go):
         super().__init__()
@@ -18,11 +18,8 @@
         self.firstTimer = False
         self.firstSkip = False
 
-        #self.resize(200, 200)
-        #self.center()
-        #self.setWindowTitle('ScoreBoard')
-
-        #create a widget to hold other widgets
+        # Here we create 3 GroupBoxs to hold other widgets : one for Player 1, one for Player 2 and one for other things
+        # needed to play the game.
         self.mainWidgetB = QGroupBox()
         self.mainWidgetB.setTitle("Player 1 - Black Stones")
         '''self.mainWidgetB.setStyleSheet("color: white;"
@@ -36,22 +33,12 @@
         self.mainWidgetM.setTitle("Others")
         self.mainWidgetM.setStyleSheet("color: black;"
                                        "background-color: grey")
-        '''self.mainWidgetR = QGroupBox()
-        self.mainWidgetR.setTitle("Rules of Go")
-        self.mainWidgetR.setStyleSheet("color: black;"
-                                       "background-color: grey")'''
+
         self.mainLayoutB = QVBoxLayout()
         self.mainLayoutW = QVBoxLayout()
         self.mainLayoutM = QVBoxLayout()
-        #self.mainLayoutR = QVBoxLayout()
-
 
-
-        #self.mainWidgetB.setMaximumSize(self.width(), 250)
-        #self.mainWidgetW.setMaximumSize(self.width(), 300)
-
-        #create two labels which will be updated by signals
-        self.label_clickLocation = QLabel("Click Location: ")
+        # Here we create all the Widgets needed for the game (label, button, timer...).
         self.label_timeRemainingW = QLabel("Time remaining: ")
         self.label_timeRemainingB = QLabel("Time remaining: ")
         self.currentTurn = "Player 1"
@@ -59,8 +46,7 @@
         self.playerLabel.setStyleSheet("font-weight: bold")
         self.mainLayoutM.addWidget(self.playerLabel)
         self.captureW = QLabel("Captures : " + str(self.go.gameLogic.captured[1]))
-        self.captureB= QLabel("Captures : "+ str(self.go.gameLogic.captured[0]))
-        #self.mainLayout.addWidget(self.label_clickLocation)
+        self.captureB= QLabel("Captures : " + str(self.go.gameLogic.captured[0]))
         self.mainLayoutW.addWidget(self.captureW)
         self.mainLayoutB.addWidget(self.captureB)
         self.matchButton = QPushButton("Match Details", self)
@@ -73,14 +59,6 @@
         self.mainLayoutM.addWidget(resetGame)
         self.timerButtonB = QPushButton('2 Minute Timer', self)
         self.timerButtonW = QPushButton('2 Minute Timer', self)
-        '''self.timerButtonB.setStyleSheet("color: white;"
-                                       "background-color: black;"
-                                       "border-style: outset;"
-                                       "border-width: 2px;"
-                                       #"border-radius: 10px;"
-                                       "border-color: white")
-                                       #"font: bold 14px")'''
-
         self.timerButtonB.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
         self.timerButtonW.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
         self.timerButtonB.clicked.connect(self.buttonTimerB_clicked)
@@ -88,27 +66,18 @@
         self.pbarB = QProgressBar(self)
         self.pbarB.setMaximum(120)
         self.pbarB.setTextVisible(False)
-        '''self.pbarB.setStyleSheet("border-style: solid;"
-                                        #"border-width: 2px;"
-                                        #"border-radius: 7px;"
-                                        "text-align: center;"
-                                        "background-color: white;"
-                                        #"margin: 10px;"
-                                        "border-color: black")'''
-        # "font: bold 14px")
         self.pbarW = QProgressBar(self)
         self.pbarW.setMaximum(120)
         self.pbarW.setTextVisible(False)
-        '''self.pbarW.setStyleSheet("border-style: solid;"
-                                 # "border-width: 2px;"
-                                 # "border-radius: 7px;"
-                                 "text-align: center;"
-                                 "background-color: white;"
-                                 # "margin: 10px;"
-                                "border-color: black")'''
         self.stepB = 0
         self.stepW = 0
         self.timer = QBasicTimer()
+        # plus joli mais fait un peu beuger la pbar !!!
+        '''self.setStyleSheet("""
+                            QProgressBar::chunk
+                            {
+                                background-color: green
+                            }""")'''
         #self.pbarB.setOrientation(Qt.Orientation.Vertical)
         #self.pbarW.setOrientation(Qt.Orientation.Vertical)
         self.mainLayoutB.addWidget(self.timerButtonB)
@@ -119,13 +88,6 @@
         self.mainLayoutW.addWidget(self.label_timeRemainingW)
         self.skipButtonB = QPushButton('Skip Turn')
         self.skipButtonW = QPushButton('Skip Turn')
-        '''self.skipButtonB.setStyleSheet("color: white;"
-                                        "background-color: black;"
-                                        "border-style: outset;"
-                                        "border-width: 2px;"
-                                        #"border-radius: 10px;"
-                                        "border-color: white")
-                                        #"font: bold 14px")'''
         self.skipButtonB.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
         self.skipButtonB.clicked.connect(self.buttonSkip_clicked)
         self.mainLayoutB.addWidget(self.skipButtonB)
@@ -133,38 +95,22 @@
         self.skipButtonW.clicked.connect(self.buttonSkip_clicked)
         self.mainLayoutW.addWidget(self.skipButtonW)
         closeButton = QPushButton('END GAME')
-        '''closeButton.setStyleSheet("color: white;"
-                                        "background-color: black;"
-                                        "border-style: outset;"
-                                        "border-width: 2px;"
-                                        "border-radius: 10px;"
-                                        "border-color: white")
-                                        # "font: bold 14px")'''
         closeButton.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
         closeButton.clicked.connect(self.buttonEnd_cliked)
-
-        '''self.scroll = QScrollArea()
-        self.scroll.setWidget(QLabel("How To Play:"+"\n"+self.rules()))
-        self.scroll.setWidgetResizable(True)
-        #self.rules = QLabel("How To Play:"+"\n"+self.rules())
-        self.mainLayoutR.addWidget(self.scroll)'''
         self.rulesButton = QPushButton('How To Play', self)
         self.rulesButton.clicked.connect(self.rules)
         self.mainLayoutM.addWidget(self.rulesButton)
         self.mainLayoutM.addWidget(closeButton)
         self.rulesButton.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
+
         self.borderRed()
-        #self.setWidget(self.mainWidgetB)
-        #self.setWidget(self.mainWidgetW)
 
         self.mainWidgetB.setLayout(self.mainLayoutB)
         self.mainWidgetW.setLayout(self.mainLayoutW)
         self.mainWidgetM.setLayout(self.mainLayoutM)
-        #self.mainWidgetR.setLayout(self.mainLayoutR)
         self.vboxMain.addWidget(self.mainWidgetB)
         self.vboxMain.addWidget(self.mainWidgetW)
         self.vboxMain.addWidget(self.mainWidgetM)
-        #self.vboxMain.addWidget(self.mainWidgetR)
         self.setLayout(self.vboxMain)
 
     def center(self):
@@ -196,35 +142,39 @@
         print('slot '+update)
         #self.redraw()'''
 
-        # Here I made the buttonEnd_clicked method to close the window when a player cliks on the End button
+    # Here we made the buttonEnd_clicked method to close the window when a player cliks on the End button and
+    # to display the End Game Window if it is the end of the game.
+
     def buttonEnd_cliked(self):
         if self.go.board.draw:
             self.go.close()
         else:
             print("game over")
+            self.go.close()
             self.go.endGameWindow.show()
 
+    # Here we made the buttonTimerB_clicked method to start/stop the timer when the Player 1 cliks on the Timer button.
     def buttonTimerB_clicked(self):
         self.firstTimer = True
         if self.timer.isActive():
-            #self.go.board.timer.stop()
             self.firstTimer = False
             self.timerButtonB.setText('Start')
             self.timerButtonW.setText('Stop')
         elif self.timerButtonB.text() == 'Time Over':
             self.pbarB.setValue(0)
             self.stepB = 0
-            # I want that my progress bar updates during 2 minutes (to do a 2-minutes timer)
-            # So I choose to start my timer every 1200 milliseconds because 1200 milliseconds equal 1.2 seconds
-            # My progress bar max is 100 so 1.2*100 = 120 seconds --> 2 minutes
-            #self.timer.start(1000, self)
-            #self.go.board.start()
-            #self.timerButtonB.setText('Stop')
+            self.pbarB.setStyleSheet("""
+                                QProgressBar::chunk
+                                {
+                                    background-color: green
+                                }""")
+            self.timer.start(1000, self)
+            self.timerButtonB.setText('Stop')
         else:
             self.timer.start(1000, self)
-            #self.go.board.start()
             self.timerButtonB.setText('Stop')
 
+    # Here we made the buttonTimerW_clicked method to start/stop the timer when the Player 2 cliks on the Timer button.
     def buttonTimerW_clicked(self):
         self.firstTimer = False
         if self.timer.isActive():
@@ -234,17 +184,18 @@
         elif self.timerButtonW.text() == 'Time Over':
             self.pbarW.setValue(0)
             self.stepW = 0
-            # I want that my progress bar updates during 2 minutes (to do a 2-minutes timer)
-            # So I choose to start my timer every 1200 milliseconds because 1200 milliseconds equal 1.2 seconds
-            # My progress bar max is 100 so 1.2*100 = 120 seconds --> 2 minutes
-            #self.timer.start(1200, self)
-            #self.go.board.start()
-            #self.timerButtonW.setText('Stop')
+            self.pbarW.setStyleSheet("""
+                                QProgressBar::chunk
+                                {
+                                    background-color: green
+                                }""")
+            self.timer.start(1200, self)
+            self.timerButtonW.setText('Stop')
         else:
             self.timer.start(1000, self)
-            #self.go.board.start()
             self.timerButtonW.setText('Stop')
 
+    # Here we made the timerEvent method to set the timer.
     def timerEvent(self, e):
 
         if self.firstTimer:
@@ -312,6 +263,7 @@
             if button == QMessageBox.StandardButton.Ok:
                 print("OK!")
 
+    # Here we made the clear method to reset the game.
     def clear(self):
         self.go.board.image = QPixmap("./icons/Board.png")
         self.go.board.resize(800, 1000) #à retravailler !
@@ -333,6 +285,7 @@
         self.update()
         self.updateUi()
 
+    # Here we made the buttonSkip_clicked method to skip your turn and change the current player.
     def buttonSkip_clicked(self, s):
         if self.currentTurn == "Player 1":
             self.currentTurn = "Player 2"
@@ -352,6 +305,8 @@
             self.firstSkip = True
         else:
             print("end")
+            # Here we turn the boolean draw into false, and we display a MessageBox to explain that the game
+            # is over (two consecutive passes terminates the game).
             self.go.board.draw = False
             dialog = QMessageBox(self)
             dialog.setWindowTitle("The End")
@@ -366,8 +321,7 @@
             if button == QMessageBox.StandardButton.Ok:
                 print("OK!")
 
-
-
+    # Here we made the matchDetails method to display the game history.
     def matchDetails(self):
         dialog = QMessageBox(self)
         dialog.setWindowTitle("Match Details")
@@ -386,21 +340,24 @@
             print("OK!")
         self.updateUi()
 
+    # Here we made the borderRed method to change the GroupBox's border in red.
+    # It changes depending on the current player.
     def borderRed(self):
         #if self.go.board.draw:
         if self.currentTurn == "Player 1":
             self.mainWidgetB.setObjectName("ColoredGroupBox")
-            self.mainWidgetB.setStyleSheet("QGroupBox#ColoredGroupBox { border: 1px solid red;}")
+            self.mainWidgetB.setStyleSheet("QGroupBox#ColoredGroupBox { border: 2px solid red;}")
             self.mainWidgetW.setObjectName("ColoredGroupBox")
-            self.mainWidgetW.setStyleSheet("QGroupBox#ColoredGroupBox { border: 1px solid white;}")
+            self.mainWidgetW.setStyleSheet("QGroupBox#ColoredGroupBox { border: 4px solid white;}")
         else:
             self.mainWidgetB.setStyleSheet("color: white;"
                                            "background-color: black")
             self.mainWidgetW.setObjectName("ColoredGroupBox")
-            self.mainWidgetW.setStyleSheet("QGroupBox#ColoredGroupBox { border: 1px solid red;}")
+            self.mainWidgetW.setStyleSheet("QGroupBox#ColoredGroupBox { border: 2px solid red;}")
             self.mainWidgetB.setObjectName("ColoredGroupBox")
-            self.mainWidgetB.setStyleSheet("QGroupBox#ColoredGroupBox { border: 1px solid black;}")
+            self.mainWidgetB.setStyleSheet("QGroupBox#ColoredGroupBox { border: 2px solid black;}")
 
+    # Here we made the rules method to display a message box with the rules of the game.
     def rules(self):
         dialog = QMessageBox(self)
         dialog.setWindowTitle("Rules")
@@ -426,8 +383,7 @@
         if button == QMessageBox.StandardButton.Ok:
             print("OK!")
 
-
-        # Here I made the updateUI method to update the UI
+    # Here we made the updateUI method to update the UI.
     def updateUi(self):
         self.playerLabel.setText("Current Turn: " + self.currentTurn)
         self.playerLabel.adjustSize()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (hgp)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (hgp2)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Projet-HCI.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Projet-HCI.iml b/.idea/Projet-HCI.iml
--- a/.idea/Projet-HCI.iml	
+++ b/.idea/Projet-HCI.iml	
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10 (hgp)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.10 (hgp2)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
